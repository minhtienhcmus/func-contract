#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

;; int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt campaign_factory
;;  MsgAddressInt owner_address
;;  cell content
;;

(int, int, slice, slice,slice, cell,cell,int,int) load_data() {
    slice ds = get_data().begin_parse();
    var (index, campaign_factory) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (-1, index, campaign_factory, ds~load_msg_addr(),ds~load_msg_addr(), ds~load_ref(),ds~load_dict(),ds~load_uint(64),ds~load_uint(8));
    } else {  
      return (0, index, campaign_factory, null(),null(), null(), new_dict(),0,2); ;; nft not initialized yet
    }
}

() store_data(int index, slice campaign_factory, slice owner_address,slice monitor, cell info, cell dic, int total_add,int status_campaign) impure {
    set_data(
        begin_cell()
            .store_uint(index, 64)
            .store_slice(campaign_factory)
            .store_slice(owner_address)
            .store_slice(monitor)
            .store_ref(info)
            .store_dict(dic)
            .store_uint(total_add, 64)
            .store_uint(status_campaign, 8)
            .end_cell()
    );
}

() send_tokens(slice recipient, int amount, int query_id,slice jetton_wallet_aff) impure {
    ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, _,_,_) = load_data();
    ;; slice info_pool = info.begin_parse();
    ;; info_pool~load_msg_addr();
    ;; info_pool~load_uint(64);
    ;; slice jetton_wallet_aff = info_pool~load_msg_addr();
    var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(jetton_wallet_aff)
    .store_coins(0)
    .store_uint(1, 107);
  var msg_body = begin_cell()
            .store_uint(op::jetton_transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(amount)
            .store_slice(recipient)
            .store_slice(recipient)
            .store_uint(0, 1)
            .store_coins(4000000)
            .store_uint(0, 1)
        .end_cell();

  msg = msg.store_ref(msg_body);
  send_raw_message(msg.end_cell(), 64);
}
;; () send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
;;   var msg = begin_cell()
;;     .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
;;     .store_slice(to_address)
;;     .store_coins(amount)
;;     .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
;;     .store_uint(op, 32)
;;     .store_uint(query_id, 64);

;;   if (~ builder_null?(payload)) {
;;     msg = msg.store_builder(payload);
;;   }

;;   send_raw_message(msg.end_cell(), send_mode);
;; }

;; () transfer_ownership(int my_balance, int index, slice campaign_factory, slice owner_address, cell content, slice sender_address, int query_id, slice in_msg_body, int fwd_fees) impure inline {
;;     throw_unless(401, equal_slices(sender_address, owner_address));

;;     slice new_owner_address = in_msg_body~load_msg_addr();
;;     force_chain(new_owner_address);
;;     slice response_destination = in_msg_body~load_msg_addr();
;;     in_msg_body~load_int(1); ;; this nft don't use custom_payload
;;     int forward_amount = in_msg_body~load_coins();
;;     throw_unless(708, slice_bits(in_msg_body) >= 1);

;;     int rest_amount = my_balance - min_tons_for_storage();
;;     if (forward_amount) {
;;       rest_amount -= (forward_amount + fwd_fees);
;;     }
;;     int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
;;     if (need_response) {
;;       rest_amount -= fwd_fees;
;;     }

;;     throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

;;     if (forward_amount) {
;;       send_msg(new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
;;     }
;;     if (need_response) {
;;       force_chain(response_destination);
;;       send_msg(response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
;;     }

;;     store_data(index, campaign_factory, new_owner_address, content);
;; }

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    (int init?, int index, slice campaign_factory, slice owner_address,slice monitor_address, cell info, cell dict_, int total_add,int status_campaign) = load_data();
    if (~ init?) {
      throw_unless(405, equal_slices(campaign_factory, sender_address));

        slice monitor = in_msg_body~load_msg_addr();
        cell _info = in_msg_body~load_ref();
        slice msg = _info.begin_parse(); 
        ;; int campaign_budget = in_msg_body~load_uint(64);
        ;; slice jetton_wallet_aff = in_msg_body~load_msg_addr();
        ;; int type_campaign = in_msg_body~load_uint(8);
        slice owner = msg~load_msg_addr();
      store_data(index, campaign_factory, owner,monitor, _info, new_dict(),0,2);
      return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::withdraw()) {
      int key = in_msg_body~load_uint(256);
      if(dict_.dict_empty?()){
        return ();
      }
      (slice payload, int success) = dict_.udict_get?(256, key);
      throw_unless(98, success);
      slice add = payload~load_msg_addr();
      int _amount = payload~load_uint(64);
      throw_unless(405, equal_slices(sender_address, add));
      slice info_pool = info.begin_parse();
      info_pool~load_msg_addr();
      info_pool~load_uint(64);
      slice jetton_wallet_aff = info_pool~load_msg_addr();
      send_tokens(sender_address,_amount,query_id,jetton_wallet_aff);
      cell info_reward = begin_cell()
              .store_slice(add)
              .store_uint(0,64).end_cell();
      dict_~udict_set(256, key, info_reward.begin_parse());
      store_data(index, campaign_factory, owner_address, monitor_address, info, dict_,total_add,status_campaign);
      return ();
    }
    if (op == op::change_owner()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        store_data(index, campaign_factory, owner_address, monitor_address, info, dict_,total_add,status_campaign);
        return ();
    }
    if (op == op::stop_campaign()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        store_data(index, campaign_factory, owner_address, monitor_address, info, dict_,total_add,1);
        return ();
    }
    if (op == op::pause_campaign()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        throw_unless(406,(2 == status_campaign));
        store_data(index, campaign_factory, owner_address, monitor_address, info, dict_,total_add,3);
        return ();
    }
    if (op == op::restart_campaign()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        throw_unless(406, (3 == status_campaign));
        store_data(index, campaign_factory, owner_address, monitor_address, info, dict_,total_add,2);
        return ();
    }
    if (op == op::change_monitor()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, monitor_address));
        slice new_monitor = in_msg_body~load_msg_addr();
        store_data(index, campaign_factory, owner_address, new_monitor, info, dict_,total_add,status_campaign);
        return ();
    }
    if (op == op::claim_token_remain()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor_address, cell info,cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        throw_unless(406, (1 == status_campaign));
        slice info_campaign = info.begin_parse();
        info_campaign~load_msg_addr();
        int budget = info_campaign~load_uint(64);
        slice jetton_wallet_aff = info_campaign~load_msg_addr();
        int amount = budget - total_add;
        throw_unless(400, amount > 0);
        send_tokens(sender_address,amount,query_id,jetton_wallet_aff);
        ;; claim remain
        return ();
    }

    if (op == op::add_aff_user()) {
        int key = in_msg_body~load_uint(256);
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dic) = load_data();
        throw_unless(405, equal_slices(sender_address, monitor_address));
        throw_unless(406, (2 == status_campaign));
        cell data_new = in_msg_body~load_ref();
        slice data_item = data_new.begin_parse();
        slice temp = data_item;
        temp~load_msg_addr();
        int _amount = temp~load_uint(64);
        if(dict_.dict_empty?()){
          dict_~udict_set(256, key, data_item);
        } else {
          (slice payload, int success) = dict_.udict_get?(256, key);
          if(success){
              ;; throw_unless(98, success);
            slice add = payload~load_msg_addr();
            int amount = payload~load_uint(64);
            cell newcell = begin_cell().store_slice(add).store_uint(_amount + amount,64 ).end_cell();
            dict_~udict_set(256, key, newcell.begin_parse());
          } else {
            dict_~udict_set(256, key, data_item);
          }
          
        }
        int _total_add = total_add + _amount;
        store_data(index, campaign_factory, owner_address, monitor_address, info, dict_, _total_add,status_campaign);

        ;; claim remain
        return ();
    }
    ;; if (op == op::get_static_data()) {
    ;;   send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(campaign_factory), 64);  ;; carry all the remaining value of the inbound message
    ;;   return ();
    ;; }
    throw(0xffffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice,slice, cell, slice, int, int) get_aff_data() method_id {
  (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, _,int total_add, int status_campaign) = load_data();
  return (init?, index, campaign_factory, owner_address,monitor,info, my_address(),total_add, status_campaign);
}
(slice) get_user_reward(int key) method_id {
   (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dic, _, _) = load_data();
    (slice payload, int success) = dic.udict_get?(256, key);
    throw_unless(98, success);

    ;; int valid_until = payload~load_uint(64);
    return ( payload);
}
(int) get_token_remain() method_id {
   (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dic,int total_add, _) = load_data();
    slice info_campaign = info.begin_parse();
    info_campaign~load_msg_addr();
    int budget = info_campaign~load_uint(64);
    int amount = budget - total_add;

    ;; int valid_until = payload~load_uint(64);
    return (amount);
}