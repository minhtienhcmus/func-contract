#include "imports/stdlib.fc";
;; #include "imports/op-codes.fc";
#include "imports/params.fc";

;; Campaign Factory smart contract

;; storage scheme

(slice, cell,cell) load_data() inline {
  var ds = get_data().begin_parse();
  return
    (ds~load_msg_addr(), ;; owner_address
     ds~load_ref() ,;; aff_pool
     ds~load_ref() ;; aff_pool
     );
}
() save_data(slice owner_address, cell aff_pool, cell reward_pool) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_ref(aff_pool)
    .store_ref(reward_pool)
    .end_cell());
}

cell calculate_pool_state_init(int key, cell aff_pool) {
  cell data = begin_cell().store_uint(key, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(aff_pool).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_pool_address(int wc, cell state_init) { 
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

;; () send_tokens(slice recipient, int amount,slice jetton_wallet, int query_id ) impure {
;;     send_raw_message(begin_cell()
;;         .store_uint(0x18, 6)
;;         .store_slice(jetton_wallet)
;;         .store_coins(0)
;;         .store_uint(1, 107)
;;         .store_ref(begin_cell()
;;             .store_uint(0x0f8a7ea5, 32)
;;             .store_uint(query_id, 64)
;;             .store_coins(amount)
;;             .store_slice(recipient)
;;             .store_slice(recipient)
;;             .store_uint(0, 1)
;;             .store_coins(10000000)
;;             .store_uint(0, 1)
;;         .end_cell())
;;     .end_cell(), 64);
;; }
() create_campaign(int key, cell aff_pool,cell reward_pool, int amount, cell content_aff,cell content_reward,int query_id) impure {
  cell state_init = calculate_pool_state_init(key, aff_pool);
  slice aff_address = calculate_pool_address(workchain(), state_init);

  cell state_reward_init = calculate_pool_state_init(key, reward_pool);
  slice reward_address = calculate_pool_address(workchain(), state_reward_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(aff_address)
            .store_coins(amount)
            .store_uint(7, 108)
            .store_ref(state_init)
            .store_ref(content_aff);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors


  var msg_reward = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(reward_address)
            .store_coins(amount)
            .store_uint(7, 108) 
            .store_ref(state_reward_init)
            .store_ref(content_reward);
  send_raw_message(msg_reward.end_cell(), 1); ;; pay transfer fees separately, revert on errors
  ;; slice msg_body = content.begin_parse(); 
  ;; slice owner_campaign = msg_body~load_msg_addr();
  ;; int budget_campaign = msg_body~load_uint(64);
  ;; slice jetton_wallet_aff = msg_body~load_msg_addr();
  ;; var body0 = create_simple_transfer_body(key, 0, budget_campaign, my_address());
  ;; body0 = body0.store_uint(0, 32); ;; append exit code
  ;; send_simple_message(100000000, jetton_wallet_aff, body0.end_cell(), 64 );
  ;; send_tokens(my_address(),budget_campaign,jetton_wallet_aff,query_id );
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    var (owner_address, aff_pool, reward_pool) = load_data();
    if (op == 1) { ;; deploy new nft
      int key = in_msg_body~load_uint(64);
      cell info_aff = begin_cell()
                   .store_slice(owner_address)
                   .store_ref(in_msg_body~load_ref())
                   .end_cell();
      cell info_reward = begin_cell()
              .store_slice(owner_address)
              .store_ref(in_msg_body~load_ref())
              .end_cell();
      create_campaign(key, aff_pool,reward_pool,in_msg_body~load_coins(), info_aff, info_reward, query_id);

      return ();
    }
    
    throw(0xffff);
}

(slice,slice) get_pool_address_by_key(int key) method_id {
    var (_, aff_pool,reward_pool) = load_data();
    cell state_aff_init = calculate_pool_state_init(key, aff_pool);
    cell state_reward_init = calculate_pool_state_init(key, reward_pool);
    return (calculate_pool_address(0, state_aff_init),calculate_pool_address(0, state_reward_init));
}

